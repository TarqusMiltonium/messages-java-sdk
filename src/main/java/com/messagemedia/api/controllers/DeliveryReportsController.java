/*
 * MessagesLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.messagemedia.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.messagemedia.api.ApiHelper;
import com.messagemedia.api.AuthManager;
import com.messagemedia.api.Configuration;
import com.messagemedia.api.exceptions.ApiException;
import com.messagemedia.api.http.Headers;
import com.messagemedia.api.http.client.HttpCallback;
import com.messagemedia.api.http.client.HttpClient;
import com.messagemedia.api.http.client.HttpContext;
import com.messagemedia.api.http.request.HttpRequest;
import com.messagemedia.api.http.response.HttpResponse;
import com.messagemedia.api.http.response.HttpStringResponse;
import com.messagemedia.api.models.CheckDeliveryReportsResponse;
import com.messagemedia.api.models.ConfirmDeliveryReportsAsReceivedRequest;
import com.messagemedia.api.models.DynamicResponse;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DeliveryReportsController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public DeliveryReportsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public DeliveryReportsController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Mark a delivery report as confirmed so it is no longer return in check delivery reports
     * requests. The confirm delivery reports endpoint is intended to be used in conjunction with
     * the check delivery reports endpoint to allow for robust processing of delivery reports. Once
     * one or more delivery reports have been processed, they can then be confirmed using the
     * confirm delivery reports endpoint so they are no longer returned in subsequent check delivery
     * reports requests. The confirm delivery reports endpoint takes a list of delivery report IDs
     * as follows: ```json { "delivery_report_ids": [ "011dcead-6988-4ad6-a1c7-6b6c68ea628d",
     * "3487b3fa-6586-4979-a233-2d1b095c7718", "ba28e94b-c83d-4759-98e7-ff9c7edb87a1" ] } ``` Up to
     * 100 delivery reports can be confirmed in a single confirm delivery reports request.
     * @param  contentType  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the DynamicResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DynamicResponse createConfirmDeliveryReportsAsReceived(
            final String contentType,
            final ConfirmDeliveryReportsAsReceivedRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateConfirmDeliveryReportsAsReceivedRequest(contentType, body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateConfirmDeliveryReportsAsReceivedResponse(context);
    }

    /**
     * Mark a delivery report as confirmed so it is no longer return in check delivery reports
     * requests. The confirm delivery reports endpoint is intended to be used in conjunction with
     * the check delivery reports endpoint to allow for robust processing of delivery reports. Once
     * one or more delivery reports have been processed, they can then be confirmed using the
     * confirm delivery reports endpoint so they are no longer returned in subsequent check delivery
     * reports requests. The confirm delivery reports endpoint takes a list of delivery report IDs
     * as follows: ```json { "delivery_report_ids": [ "011dcead-6988-4ad6-a1c7-6b6c68ea628d",
     * "3487b3fa-6586-4979-a233-2d1b095c7718", "ba28e94b-c83d-4759-98e7-ff9c7edb87a1" ] } ``` Up to
     * 100 delivery reports can be confirmed in a single confirm delivery reports request.
     * @param  contentType  Required parameter: Example:
     * @param  body  Required parameter: Example:
     * @return    Returns the DynamicResponse response from the API call
     */
    public CompletableFuture<DynamicResponse> createConfirmDeliveryReportsAsReceivedAsync(
            final String contentType,
            final ConfirmDeliveryReportsAsReceivedRequest body) {
        return makeHttpCallAsync(() -> buildCreateConfirmDeliveryReportsAsReceivedRequest(
                contentType, body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateConfirmDeliveryReportsAsReceivedResponse(context));
    }

    /**
     * Builds the HttpRequest object for createConfirmDeliveryReportsAsReceived.
     */
    private HttpRequest buildCreateConfirmDeliveryReportsAsReceivedRequest(
            final String contentType,
            final ConfirmDeliveryReportsAsReceivedRequest body) throws JsonProcessingException {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/delivery_reports/confirmed");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", contentType);
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createConfirmDeliveryReportsAsReceived.
     * @return An object of type DynamicResponse
     */
    private DynamicResponse handleCreateConfirmDeliveryReportsAsReceivedResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 400) {
            throw new ApiException("", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        DynamicResponse result = new DynamicResponse(response);

        return result;
    }

    /**
     * Check for any delivery reports that have been received. Delivery reports are a notification
     * of the change in status of a message as it is being processed. Each request to the check
     * delivery reports endpoint will return any delivery reports received that have not yet been
     * confirmed using the confirm delivery reports endpoint. A response from the check delivery
     * reports endpoint will have the following structure: ```json { "delivery_reports": [ {
     * "callback_url": "https://my.callback.url.com", "delivery_report_id":
     * "01e1fa0a-6e27-4945-9cdb-18644b4de043", "source_number": "+61491570157", "date_received":
     * "2017-05-20T06:30:37.642Z", "status": "enroute", "delay": 0, "submitted_date":
     * "2017-05-20T06:30:37.639Z", "original_text": "My first message!", "message_id":
     * "d781dcab-d9d8-4fb2-9e03-872f07ae94ba", "vendor_account_id": { "vendor_id": "MessageMedia",
     * "account_id": "MyAccount" }, "metadata": { "key1": "value1", "key2": "value2" } }, {
     * "callback_url": "https://my.callback.url.com", "delivery_report_id":
     * "0edf9022-7ccc-43e6-acab-480e93e98c1b", "source_number": "+61491570158", "date_received":
     * "2017-05-21T01:46:42.579Z", "status": "enroute", "delay": 0, "submitted_date":
     * "2017-05-21T01:46:42.574Z", "original_text": "My second message!", "message_id":
     * "fbb3b3f5-b702-4d8b-ab44-65b2ee39a281", "vendor_account_id": { "vendor_id": "MessageMedia",
     * "account_id": "MyAccount" }, "metadata": { "key1": "value1", "key2": "value2" } } ] } ```
     * Each delivery report will contain details about the message, including any metadata specified
     * and the new status of the message (as each delivery report indicates a change in status of a
     * message) and the timestamp at which the status changed. Every delivery report will have a
     * unique delivery report ID for use with the confirm delivery reports endpoint. *Note: The
     * source number and destination number properties in a delivery report are the inverse of those
     * specified in the message that the delivery report relates to. The source number of the
     * delivery report is the destination number of the original message.* Subsequent requests to
     * the check delivery reports endpoint will return the same delivery reports and a maximum of
     * 100 delivery reports will be returned in each request. Applications should use the confirm
     * delivery reports endpoint in the following pattern so that delivery reports that have been
     * processed are no longer returned in subsequent check delivery reports requests. 1. Call check
     * delivery reports endpoint 2. Process each delivery report 3. Confirm all processed delivery
     * reports using the confirm delivery reports endpoint *Note: It is recommended to use the
     * Webhooks feature to receive reply messages rather than polling the check delivery reports
     * endpoint.*.
     * @return    Returns the CheckDeliveryReportsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CheckDeliveryReportsResponse getCheckDeliveryReports() throws ApiException, IOException {
        HttpRequest request = buildGetCheckDeliveryReportsRequest();
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetCheckDeliveryReportsResponse(context);
    }

    /**
     * Check for any delivery reports that have been received. Delivery reports are a notification
     * of the change in status of a message as it is being processed. Each request to the check
     * delivery reports endpoint will return any delivery reports received that have not yet been
     * confirmed using the confirm delivery reports endpoint. A response from the check delivery
     * reports endpoint will have the following structure: ```json { "delivery_reports": [ {
     * "callback_url": "https://my.callback.url.com", "delivery_report_id":
     * "01e1fa0a-6e27-4945-9cdb-18644b4de043", "source_number": "+61491570157", "date_received":
     * "2017-05-20T06:30:37.642Z", "status": "enroute", "delay": 0, "submitted_date":
     * "2017-05-20T06:30:37.639Z", "original_text": "My first message!", "message_id":
     * "d781dcab-d9d8-4fb2-9e03-872f07ae94ba", "vendor_account_id": { "vendor_id": "MessageMedia",
     * "account_id": "MyAccount" }, "metadata": { "key1": "value1", "key2": "value2" } }, {
     * "callback_url": "https://my.callback.url.com", "delivery_report_id":
     * "0edf9022-7ccc-43e6-acab-480e93e98c1b", "source_number": "+61491570158", "date_received":
     * "2017-05-21T01:46:42.579Z", "status": "enroute", "delay": 0, "submitted_date":
     * "2017-05-21T01:46:42.574Z", "original_text": "My second message!", "message_id":
     * "fbb3b3f5-b702-4d8b-ab44-65b2ee39a281", "vendor_account_id": { "vendor_id": "MessageMedia",
     * "account_id": "MyAccount" }, "metadata": { "key1": "value1", "key2": "value2" } } ] } ```
     * Each delivery report will contain details about the message, including any metadata specified
     * and the new status of the message (as each delivery report indicates a change in status of a
     * message) and the timestamp at which the status changed. Every delivery report will have a
     * unique delivery report ID for use with the confirm delivery reports endpoint. *Note: The
     * source number and destination number properties in a delivery report are the inverse of those
     * specified in the message that the delivery report relates to. The source number of the
     * delivery report is the destination number of the original message.* Subsequent requests to
     * the check delivery reports endpoint will return the same delivery reports and a maximum of
     * 100 delivery reports will be returned in each request. Applications should use the confirm
     * delivery reports endpoint in the following pattern so that delivery reports that have been
     * processed are no longer returned in subsequent check delivery reports requests. 1. Call check
     * delivery reports endpoint 2. Process each delivery report 3. Confirm all processed delivery
     * reports using the confirm delivery reports endpoint *Note: It is recommended to use the
     * Webhooks feature to receive reply messages rather than polling the check delivery reports
     * endpoint.*.
     * @return    Returns the CheckDeliveryReportsResponse response from the API call
     */
    public CompletableFuture<CheckDeliveryReportsResponse> getCheckDeliveryReportsAsync() {
        return makeHttpCallAsync(() -> buildGetCheckDeliveryReportsRequest(),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetCheckDeliveryReportsResponse(context));
    }

    /**
     * Builds the HttpRequest object for getCheckDeliveryReports.
     */
    private HttpRequest buildGetCheckDeliveryReportsRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/v1/delivery_reports");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getCheckDeliveryReports.
     * @return An object of type CheckDeliveryReportsResponse
     */
    private CheckDeliveryReportsResponse handleGetCheckDeliveryReportsResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        CheckDeliveryReportsResponse result = ApiHelper.deserialize(responseBody,
                CheckDeliveryReportsResponse.class);

        return result;
    }

}